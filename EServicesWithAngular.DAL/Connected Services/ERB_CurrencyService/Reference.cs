//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using EServicesWithAngular.Domain.Common;

namespace ERB_CurrencyService
{
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://service.dirac.com/", ConfigurationName="ERB_CurrencyService.CurrencyService")]
    public interface CurrencyService
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<ERB_CurrencyService.getCurrencyListResponse> getCurrencyListAsync(ERB_CurrencyService.getCurrencyList request);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<ERB_CurrencyService.getCurrencyActiveListResponse> getCurrencyActiveListAsync(ERB_CurrencyService.getCurrencyActiveList request);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<ERB_CurrencyService.findoneResponse> findoneAsync(ERB_CurrencyService.findone request);
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://service.dirac.com/")]
    public partial class currency
    {
        
        private long idField;
        
        private string descriptionField;
        
        private string iSO_CodeField;
        
        private string cursymbolField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, Order=0)]
        public long id
        {
            get
            {
                return this.idField;
            }
            set
            {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, Order=1)]
        public string description
        {
            get
            {
                return this.descriptionField;
            }
            set
            {
                this.descriptionField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, Order=2)]
        public string ISO_Code
        {
            get
            {
                return this.iSO_CodeField;
            }
            set
            {
                this.iSO_CodeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, Order=3)]
        public string cursymbol
        {
            get
            {
                return this.cursymbolField;
            }
            set
            {
                this.cursymbolField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="getCurrencyList", WrapperNamespace="http://service.dirac.com/", IsWrapped=true)]
    public partial class getCurrencyList
    {
        
        public getCurrencyList()
        {
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="getCurrencyListResponse", WrapperNamespace="http://service.dirac.com/", IsWrapped=true)]
    public partial class getCurrencyListResponse
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://service.dirac.com/", Order=0)]
        [System.Xml.Serialization.XmlElementAttribute("currency", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public ERB_CurrencyService.currency[] currency;
        
        public getCurrencyListResponse()
        {
        }
        
        public getCurrencyListResponse(ERB_CurrencyService.currency[] currency)
        {
            this.currency = currency;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="getCurrencyActiveList", WrapperNamespace="http://service.dirac.com/", IsWrapped=true)]
    public partial class getCurrencyActiveList
    {
        
        public getCurrencyActiveList()
        {
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="getCurrencyActiveListResponse", WrapperNamespace="http://service.dirac.com/", IsWrapped=true)]
    public partial class getCurrencyActiveListResponse
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://service.dirac.com/", Order=0)]
        [System.Xml.Serialization.XmlElementAttribute("currency", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public ERB_CurrencyService.currency[] currency;
        
        public getCurrencyActiveListResponse()
        {
        }
        
        public getCurrencyActiveListResponse(ERB_CurrencyService.currency[] currency)
        {
            this.currency = currency;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="findone", WrapperNamespace="http://service.dirac.com/", IsWrapped=true)]
    public partial class findone
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://service.dirac.com/", Order=0)]
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public long id;
        
        public findone()
        {
        }
        
        public findone(long id)
        {
            this.id = id;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="findoneResponse", WrapperNamespace="http://service.dirac.com/", IsWrapped=true)]
    public partial class findoneResponse
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://service.dirac.com/", Order=0)]
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public ERB_CurrencyService.currency currency;
        
        public findoneResponse()
        {
        }
        
        public findoneResponse(ERB_CurrencyService.currency currency)
        {
            this.currency = currency;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.0")]
    public interface CurrencyServiceChannel : ERB_CurrencyService.CurrencyService, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.0")]
    public partial class CurrencyServiceClient : System.ServiceModel.ClientBase<ERB_CurrencyService.CurrencyService>, ERB_CurrencyService.CurrencyService
    {
        
        /// <summary>
        /// Implement this partial method to configure the service endpoint.
        /// </summary>
        /// <param name="serviceEndpoint">The endpoint to configure</param>
        /// <param name="clientCredentials">The client credentials</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public CurrencyServiceClient() : 
                base(CurrencyServiceClient.GetDefaultBinding(), CurrencyServiceClient.GetDefaultEndpointAddress())
        {
            this.Endpoint.Name = EndpointConfiguration.CurrencyServiceImplPort.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public CurrencyServiceClient(EndpointConfiguration endpointConfiguration) : 
                base(CurrencyServiceClient.GetBindingForEndpoint(endpointConfiguration), CurrencyServiceClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public CurrencyServiceClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(CurrencyServiceClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public CurrencyServiceClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(CurrencyServiceClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public CurrencyServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<ERB_CurrencyService.getCurrencyListResponse> ERB_CurrencyService.CurrencyService.getCurrencyListAsync(ERB_CurrencyService.getCurrencyList request)
        {
            return base.Channel.getCurrencyListAsync(request);
        }
        
        public System.Threading.Tasks.Task<ERB_CurrencyService.getCurrencyListResponse> getCurrencyListAsync()
        {
            ERB_CurrencyService.getCurrencyList inValue = new ERB_CurrencyService.getCurrencyList();
            return ((ERB_CurrencyService.CurrencyService)(this)).getCurrencyListAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<ERB_CurrencyService.getCurrencyActiveListResponse> ERB_CurrencyService.CurrencyService.getCurrencyActiveListAsync(ERB_CurrencyService.getCurrencyActiveList request)
        {
            return base.Channel.getCurrencyActiveListAsync(request);
        }
        
        public System.Threading.Tasks.Task<ERB_CurrencyService.getCurrencyActiveListResponse> getCurrencyActiveListAsync()
        {
            ERB_CurrencyService.getCurrencyActiveList inValue = new ERB_CurrencyService.getCurrencyActiveList();
            return ((ERB_CurrencyService.CurrencyService)(this)).getCurrencyActiveListAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<ERB_CurrencyService.findoneResponse> ERB_CurrencyService.CurrencyService.findoneAsync(ERB_CurrencyService.findone request)
        {
            return base.Channel.findoneAsync(request);
        }
        
        public System.Threading.Tasks.Task<ERB_CurrencyService.findoneResponse> findoneAsync(long id)
        {
            ERB_CurrencyService.findone inValue = new ERB_CurrencyService.findone();
            inValue.id = id;
            return ((ERB_CurrencyService.CurrencyService)(this)).findoneAsync(inValue);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.CurrencyServiceImplPort))
            {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.CurrencyServiceImplPort))
            {
                return new System.ServiceModel.EndpointAddress(StaticClass.Configuration["ServiceURL:ERBCurrencyService"]);
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding()
        {
            return CurrencyServiceClient.GetBindingForEndpoint(EndpointConfiguration.CurrencyServiceImplPort);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress()
        {
            return CurrencyServiceClient.GetEndpointAddress(EndpointConfiguration.CurrencyServiceImplPort);
        }
        
        public enum EndpointConfiguration
        {
            
            CurrencyServiceImplPort,
        }
    }
}
