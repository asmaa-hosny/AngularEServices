//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace AppSendService
{
    using System.Runtime.Serialization;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.Runtime.Serialization.DataContractAttribute(Name="DetialsEntery", Namespace="http://schemas.datacontract.org/2004/07/AppSupportServicesLogic")]
    public partial class DetialsEntery : object
    {
        
        private string TitleARField;
        
        private string TitleENField;
        
        private string ValueARField;
        
        private string ValueENField;
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TitleAR
        {
            get
            {
                return this.TitleARField;
            }
            set
            {
                this.TitleARField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string TitleEN
        {
            get
            {
                return this.TitleENField;
            }
            set
            {
                this.TitleENField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ValueAR
        {
            get
            {
                return this.ValueARField;
            }
            set
            {
                this.ValueARField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string ValueEN
        {
            get
            {
                return this.ValueENField;
            }
            set
            {
                this.ValueENField = value;
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="AppSendService.ISend")]
    public interface ISend
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISend/sendSPSMS", ReplyAction="http://tempuri.org/ISend/sendSPSMSResponse")]
        System.Threading.Tasks.Task<string> sendSPSMSAsync(string cellPhone, string message);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISend/sendNCRPSMS", ReplyAction="http://tempuri.org/ISend/sendNCRPSMSResponse")]
        System.Threading.Tasks.Task<string> sendNCRPSMSAsync(string cellPhone, string message);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISend/sendHadirSMS", ReplyAction="http://tempuri.org/ISend/sendHadirSMSResponse")]
        System.Threading.Tasks.Task<string> sendHadirSMSAsync(string cellPhone, string message);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISend/sendDGPSMS", ReplyAction="http://tempuri.org/ISend/sendDGPSMSResponse")]
        System.Threading.Tasks.Task<string> sendDGPSMSAsync(string cellPhone, string message);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISend/sendKACARESMS", ReplyAction="http://tempuri.org/ISend/sendKACARESMSResponse")]
        System.Threading.Tasks.Task<string> sendKACARESMSAsync(string cellPhone, string message);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISend/sendHRCARESMS", ReplyAction="http://tempuri.org/ISend/sendHRCARESMSResponse")]
        System.Threading.Tasks.Task<string> sendHRCARESMSAsync(string cellPhone, string message);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISend/sendJobCARESMS", ReplyAction="http://tempuri.org/ISend/sendJobCARESMSResponse")]
        System.Threading.Tasks.Task<string> sendJobCARESMSAsync(string cellPhone, string message);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISend/sendPOfficeSMS", ReplyAction="http://tempuri.org/ISend/sendPOfficeSMSResponse")]
        System.Threading.Tasks.Task<string> sendPOfficeSMSAsync(string cellPhone, string message);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISend/sendVPNSMS", ReplyAction="http://tempuri.org/ISend/sendVPNSMSResponse")]
        System.Threading.Tasks.Task<string> sendVPNSMSAsync(string cellPhone, string message);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISend/sendEMAIL", ReplyAction="http://tempuri.org/ISend/sendEMAILResponse")]
        System.Threading.Tasks.Task sendEMAILAsync(string From, string Email_body, string EmailSubject, string To_Address, string CC_Address, string BCC_Address, System.Nullable<System.DateTime> DeliveryDate);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ISend/sendEServicesEMAIL", ReplyAction="http://tempuri.org/ISend/sendEServicesEMAILResponse")]
        System.Threading.Tasks.Task sendEServicesEMAILAsync(string From, string subject, string Email_bodyAR, string Email_bodyEN, AppSendService.DetialsEntery[] Details, string RequestDetailsLabelAR, string RequestDetailsLabelEN, string ResponsibleDepartment, string PhonExtension, string To_Address, string CC_Address, string BCC_Address, System.Nullable<System.DateTime> DeliveryDate);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    public interface ISendChannel : AppSendService.ISend, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.2")]
    public partial class SendClient : System.ServiceModel.ClientBase<AppSendService.ISend>, AppSendService.ISend
    {
        
        /// <summary>
        /// Implement this partial method to configure the service endpoint.
        /// </summary>
        /// <param name="serviceEndpoint">The endpoint to configure</param>
        /// <param name="clientCredentials">The client credentials</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public SendClient() : 
                base(SendClient.GetDefaultBinding(), SendClient.GetDefaultEndpointAddress())
        {
            this.Endpoint.Name = EndpointConfiguration.BasicHttpBinding_ISend.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public SendClient(EndpointConfiguration endpointConfiguration) : 
                base(SendClient.GetBindingForEndpoint(endpointConfiguration), SendClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public SendClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(SendClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public SendClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(SendClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public SendClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        public System.Threading.Tasks.Task<string> sendSPSMSAsync(string cellPhone, string message)
        {
            return base.Channel.sendSPSMSAsync(cellPhone, message);
        }
        
        public System.Threading.Tasks.Task<string> sendNCRPSMSAsync(string cellPhone, string message)
        {
            return base.Channel.sendNCRPSMSAsync(cellPhone, message);
        }
        
        public System.Threading.Tasks.Task<string> sendHadirSMSAsync(string cellPhone, string message)
        {
            return base.Channel.sendHadirSMSAsync(cellPhone, message);
        }
        
        public System.Threading.Tasks.Task<string> sendDGPSMSAsync(string cellPhone, string message)
        {
            return base.Channel.sendDGPSMSAsync(cellPhone, message);
        }
        
        public System.Threading.Tasks.Task<string> sendKACARESMSAsync(string cellPhone, string message)
        {
            return base.Channel.sendKACARESMSAsync(cellPhone, message);
        }
        
        public System.Threading.Tasks.Task<string> sendHRCARESMSAsync(string cellPhone, string message)
        {
            return base.Channel.sendHRCARESMSAsync(cellPhone, message);
        }
        
        public System.Threading.Tasks.Task<string> sendJobCARESMSAsync(string cellPhone, string message)
        {
            return base.Channel.sendJobCARESMSAsync(cellPhone, message);
        }
        
        public System.Threading.Tasks.Task<string> sendPOfficeSMSAsync(string cellPhone, string message)
        {
            return base.Channel.sendPOfficeSMSAsync(cellPhone, message);
        }
        
        public System.Threading.Tasks.Task<string> sendVPNSMSAsync(string cellPhone, string message)
        {
            return base.Channel.sendVPNSMSAsync(cellPhone, message);
        }
        
        public System.Threading.Tasks.Task sendEMAILAsync(string From, string Email_body, string EmailSubject, string To_Address, string CC_Address, string BCC_Address, System.Nullable<System.DateTime> DeliveryDate)
        {
            return base.Channel.sendEMAILAsync(From, Email_body, EmailSubject, To_Address, CC_Address, BCC_Address, DeliveryDate);
        }
        
        public System.Threading.Tasks.Task sendEServicesEMAILAsync(string From, string subject, string Email_bodyAR, string Email_bodyEN, AppSendService.DetialsEntery[] Details, string RequestDetailsLabelAR, string RequestDetailsLabelEN, string ResponsibleDepartment, string PhonExtension, string To_Address, string CC_Address, string BCC_Address, System.Nullable<System.DateTime> DeliveryDate)
        {
            return base.Channel.sendEServicesEMAILAsync(From, subject, Email_bodyAR, Email_bodyEN, Details, RequestDetailsLabelAR, RequestDetailsLabelEN, ResponsibleDepartment, PhonExtension, To_Address, CC_Address, BCC_Address, DeliveryDate);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_ISend))
            {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.BasicHttpBinding_ISend))
            {
                return new System.ServiceModel.EndpointAddress("http://ruh0i1ws001:5000/Send.svc");
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding()
        {
            return SendClient.GetBindingForEndpoint(EndpointConfiguration.BasicHttpBinding_ISend);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress()
        {
            return SendClient.GetEndpointAddress(EndpointConfiguration.BasicHttpBinding_ISend);
        }
        
        public enum EndpointConfiguration
        {
            
            BasicHttpBinding_ISend,
        }
    }
}
