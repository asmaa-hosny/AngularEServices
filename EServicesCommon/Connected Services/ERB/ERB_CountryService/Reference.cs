//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using CommonLibrary.Configuaration;
using EServicesCommon.Configuaration;
using EServicesCommon.DI;

namespace ERB_CountryService
{
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.0")]
    [System.ServiceModel.ServiceContractAttribute(Namespace="http://service.dirac.com/", ConfigurationName="ERB_CountryService.CountryService")]
    public interface CountryService
    {
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<ERB_CountryService.GetExtraDaysAfterResponse> GetExtraDaysAfterAsync(ERB_CountryService.GetExtraDaysAfter request);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<ERB_CountryService.findAllResponse> findAllAsync(ERB_CountryService.findAll request);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<ERB_CountryService.findoneResponse> findoneAsync(ERB_CountryService.findone request);
        
        [System.ServiceModel.OperationContractAttribute(Action="", ReplyAction="*")]
        [System.ServiceModel.XmlSerializerFormatAttribute(SupportFaults=true)]
        System.Threading.Tasks.Task<ERB_CountryService.GetExtraDaysBeforeResponse> GetExtraDaysBeforeAsync(ERB_CountryService.GetExtraDaysBefore request);
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetExtraDaysAfter", WrapperNamespace="http://service.dirac.com/", IsWrapped=true)]
    public partial class GetExtraDaysAfter
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://service.dirac.com/", Order=0)]
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public long countryid;
        
        public GetExtraDaysAfter()
        {
        }
        
        public GetExtraDaysAfter(long countryid)
        {
            this.countryid = countryid;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetExtraDaysAfterResponse", WrapperNamespace="http://service.dirac.com/", IsWrapped=true)]
    public partial class GetExtraDaysAfterResponse
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://service.dirac.com/", Order=0)]
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public int country;
        
        public GetExtraDaysAfterResponse()
        {
        }
        
        public GetExtraDaysAfterResponse(int country)
        {
            this.country = country;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.Xml.Serialization.XmlTypeAttribute(Namespace="http://service.dirac.com/")]
    public partial class country
    {
        
        private long idField;
        
        private string nameField;
        
        private string descriptionField;
        
        private string countrycodeField;
        
        private decimal extramandatedaysField;
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, Order=0)]
        public long id
        {
            get
            {
                return this.idField;
            }
            set
            {
                this.idField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, Order=1)]
        public string name
        {
            get
            {
                return this.nameField;
            }
            set
            {
                this.nameField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, Order=2)]
        public string description
        {
            get
            {
                return this.descriptionField;
            }
            set
            {
                this.descriptionField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, Order=3)]
        public string countrycode
        {
            get
            {
                return this.countrycodeField;
            }
            set
            {
                this.countrycodeField = value;
            }
        }
        
        /// <remarks/>
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified, Order=4)]
        public decimal extramandatedays
        {
            get
            {
                return this.extramandatedaysField;
            }
            set
            {
                this.extramandatedaysField = value;
            }
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="findAll", WrapperNamespace="http://service.dirac.com/", IsWrapped=true)]
    public partial class findAll
    {
        
        public findAll()
        {
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="findAllResponse", WrapperNamespace="http://service.dirac.com/", IsWrapped=true)]
    public partial class findAllResponse
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://service.dirac.com/", Order=0)]
        [System.Xml.Serialization.XmlElementAttribute("country", Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public ERB_CountryService.country[] country;
        
        public findAllResponse()
        {
        }
        
        public findAllResponse(ERB_CountryService.country[] country)
        {
            this.country = country;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="findone", WrapperNamespace="http://service.dirac.com/", IsWrapped=true)]
    public partial class findone
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://service.dirac.com/", Order=0)]
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public long id;
        
        public findone()
        {
        }
        
        public findone(long id)
        {
            this.id = id;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="findoneResponse", WrapperNamespace="http://service.dirac.com/", IsWrapped=true)]
    public partial class findoneResponse
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://service.dirac.com/", Order=0)]
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public ERB_CountryService.country country;
        
        public findoneResponse()
        {
        }
        
        public findoneResponse(ERB_CountryService.country country)
        {
            this.country = country;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetExtraDaysBefore", WrapperNamespace="http://service.dirac.com/", IsWrapped=true)]
    public partial class GetExtraDaysBefore
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://service.dirac.com/", Order=0)]
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public long countryid;
        
        public GetExtraDaysBefore()
        {
        }
        
        public GetExtraDaysBefore(long countryid)
        {
            this.countryid = countryid;
        }
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.0")]
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    [System.ServiceModel.MessageContractAttribute(WrapperName="GetExtraDaysBeforeResponse", WrapperNamespace="http://service.dirac.com/", IsWrapped=true)]
    public partial class GetExtraDaysBeforeResponse
    {
        
        [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://service.dirac.com/", Order=0)]
        [System.Xml.Serialization.XmlElementAttribute(Form=System.Xml.Schema.XmlSchemaForm.Unqualified)]
        public int country;
        
        public GetExtraDaysBeforeResponse()
        {
        }
        
        public GetExtraDaysBeforeResponse(int country)
        {
            this.country = country;
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.0")]
    public interface CountryServiceChannel : ERB_CountryService.CountryService, System.ServiceModel.IClientChannel
    {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.Tools.ServiceModel.Svcutil", "2.0.0")]
    public partial class CountryServiceClient : System.ServiceModel.ClientBase<ERB_CountryService.CountryService>, ERB_CountryService.CountryService
    {
        
        /// <summary>
        /// Implement this partial method to configure the service endpoint.
        /// </summary>
        /// <param name="serviceEndpoint">The endpoint to configure</param>
        /// <param name="clientCredentials">The client credentials</param>
        static partial void ConfigureEndpoint(System.ServiceModel.Description.ServiceEndpoint serviceEndpoint, System.ServiceModel.Description.ClientCredentials clientCredentials);
        
        public CountryServiceClient() : 
                base(CountryServiceClient.GetDefaultBinding(), CountryServiceClient.GetDefaultEndpointAddress())
        {
            this.Endpoint.Name = EndpointConfiguration.CountryServiceImplPort.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public CountryServiceClient(EndpointConfiguration endpointConfiguration) : 
                base(CountryServiceClient.GetBindingForEndpoint(endpointConfiguration), CountryServiceClient.GetEndpointAddress(endpointConfiguration))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public CountryServiceClient(EndpointConfiguration endpointConfiguration, string remoteAddress) : 
                base(CountryServiceClient.GetBindingForEndpoint(endpointConfiguration), new System.ServiceModel.EndpointAddress(remoteAddress))
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public CountryServiceClient(EndpointConfiguration endpointConfiguration, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(CountryServiceClient.GetBindingForEndpoint(endpointConfiguration), remoteAddress)
        {
            this.Endpoint.Name = endpointConfiguration.ToString();
            ConfigureEndpoint(this.Endpoint, this.ClientCredentials);
        }
        
        public CountryServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress)
        {
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<ERB_CountryService.GetExtraDaysAfterResponse> ERB_CountryService.CountryService.GetExtraDaysAfterAsync(ERB_CountryService.GetExtraDaysAfter request)
        {
            return base.Channel.GetExtraDaysAfterAsync(request);
        }
        
        public System.Threading.Tasks.Task<ERB_CountryService.GetExtraDaysAfterResponse> GetExtraDaysAfterAsync(long countryid)
        {
            ERB_CountryService.GetExtraDaysAfter inValue = new ERB_CountryService.GetExtraDaysAfter();
            inValue.countryid = countryid;
            return ((ERB_CountryService.CountryService)(this)).GetExtraDaysAfterAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<ERB_CountryService.findAllResponse> ERB_CountryService.CountryService.findAllAsync(ERB_CountryService.findAll request)
        {
            return base.Channel.findAllAsync(request);
        }
        
        public System.Threading.Tasks.Task<ERB_CountryService.findAllResponse> findAllAsync()
        {
            ERB_CountryService.findAll inValue = new ERB_CountryService.findAll();
            return ((ERB_CountryService.CountryService)(this)).findAllAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<ERB_CountryService.findoneResponse> ERB_CountryService.CountryService.findoneAsync(ERB_CountryService.findone request)
        {
            return base.Channel.findoneAsync(request);
        }
        
        public System.Threading.Tasks.Task<ERB_CountryService.findoneResponse> findoneAsync(long id)
        {
            ERB_CountryService.findone inValue = new ERB_CountryService.findone();
            inValue.id = id;
            return ((ERB_CountryService.CountryService)(this)).findoneAsync(inValue);
        }
        
        [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
        System.Threading.Tasks.Task<ERB_CountryService.GetExtraDaysBeforeResponse> ERB_CountryService.CountryService.GetExtraDaysBeforeAsync(ERB_CountryService.GetExtraDaysBefore request)
        {
            return base.Channel.GetExtraDaysBeforeAsync(request);
        }
        
        public System.Threading.Tasks.Task<ERB_CountryService.GetExtraDaysBeforeResponse> GetExtraDaysBeforeAsync(long countryid)
        {
            ERB_CountryService.GetExtraDaysBefore inValue = new ERB_CountryService.GetExtraDaysBefore();
            inValue.countryid = countryid;
            return ((ERB_CountryService.CountryService)(this)).GetExtraDaysBeforeAsync(inValue);
        }
        
        public virtual System.Threading.Tasks.Task OpenAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginOpen(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndOpen));
        }
        
        public virtual System.Threading.Tasks.Task CloseAsync()
        {
            return System.Threading.Tasks.Task.Factory.FromAsync(((System.ServiceModel.ICommunicationObject)(this)).BeginClose(null, null), new System.Action<System.IAsyncResult>(((System.ServiceModel.ICommunicationObject)(this)).EndClose));
        }
        
        private static System.ServiceModel.Channels.Binding GetBindingForEndpoint(EndpointConfiguration endpointConfiguration)
        {
            if ((endpointConfiguration == EndpointConfiguration.CountryServiceImplPort))
            {
                System.ServiceModel.BasicHttpBinding result = new System.ServiceModel.BasicHttpBinding();
                result.MaxBufferSize = int.MaxValue;
                result.ReaderQuotas = System.Xml.XmlDictionaryReaderQuotas.Max;
                result.MaxReceivedMessageSize = int.MaxValue;
                result.AllowCookies = true;
                return result;
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.EndpointAddress GetEndpointAddress(EndpointConfiguration endpointConfiguration)
        {
            var _config = FactoryManager.Instance.Resolve<ICoreConfigurations>();
            if ((endpointConfiguration == EndpointConfiguration.CountryServiceImplPort))
            {
                return new System.ServiceModel.EndpointAddress(_config.ERBCountryService);
            }
            throw new System.InvalidOperationException(string.Format("Could not find endpoint with name \'{0}\'.", endpointConfiguration));
        }
        
        private static System.ServiceModel.Channels.Binding GetDefaultBinding()
        {
            return CountryServiceClient.GetBindingForEndpoint(EndpointConfiguration.CountryServiceImplPort);
        }
        
        private static System.ServiceModel.EndpointAddress GetDefaultEndpointAddress()
        {
            return CountryServiceClient.GetEndpointAddress(EndpointConfiguration.CountryServiceImplPort);
        }
        
        public enum EndpointConfiguration
        {
            
            CountryServiceImplPort,
        }
    }
}
